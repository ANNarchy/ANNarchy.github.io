# PoissonPopulation { #ANNarchy.inputs.PoissonPopulation.PoissonPopulation }

```python
inputs.PoissonPopulation.PoissonPopulation(
    self,
    geometry,
    name=None,
    rates=None,
    target=None,
    parameters={},
    refractory=None,
    copied=False,
    net_id=0,
)
```

Population of spiking neurons following a Poisson distribution.

**Case 1:** Input population

Each neuron of the population will randomly emit spikes, with a mean firing rate defined by the *rates* argument.

The mean firing rate in Hz can be a fixed value for all neurons:

```python
pop = ann.PoissonPopulation(geometry=100, rates=100.0)
```

but it can be modified later as a normal parameter:

```python
pop.rates = np.linspace(10, 150, 100)
```

It is also possible to define a temporal equation for the rates, by passing a string to the argument:

```python
pop = ann.PoissonPopulation(
    geometry=100, 
    rates="100.0 * (1.0 + sin(2*pi*t/1000.0) )/2.0"
)
```

The syntax of this equation follows the same structure as neural variables.

It is also possible to add parameters to the population which can be used in the equation of `rates`:

```python
pop = ann.PoissonPopulation(
    geometry=100,
    parameters = '''
        amp = 100.0
        frequency = 1.0
    ''',
    rates="amp * (1.0 + sin(2*pi*frequency*t/1000.0) )/2.0"
)
```

**Note:** The preceding definition is fully equivalent to the definition of this neuron:

```python
poisson = ann.Neuron(
    parameters = '''
        amp = 100.0
        frequency = 1.0
    ''',
    equations = '''
        rates = amp * (1.0 + sin(2*pi*frequency*t/1000.0) )/2.0
        p = Uniform(0.0, 1.0) * 1000.0 / dt
    ''',
    spike = '''
        p < rates
    '''
)
```

The refractory period can also be set, so that a neuron can not emit two spikes too close from each other.

**Case 2:** Hybrid population

If the ``rates`` argument is not set, the population can be used as an interface from a rate-coded population.

The ``target`` argument specifies which incoming projections will be summed to determine the instantaneous firing rate of each neuron.

## Parameters {.doc-section .doc-section-parameters}

| Name       | Type                | Description                                                                                       | Default    |
|------------|---------------------|---------------------------------------------------------------------------------------------------|------------|
| geometry   | int \| tuple\[int\] | population geometry as tuple.                                                                     | _required_ |
| name       | str                 | unique name of the population (optional).                                                         | `None`     |
| rates      | float \| str        | mean firing rate of each neuron. It can be a single value (e.g. 10.0) or an equation (as string). | `None`     |
| target     | str                 | the mean firing rate will be the weighted sum of inputs having this target name (e.g. "exc").     | `None`     |
| parameters | dict                | additional parameters which can be used in the `rates` equation.                                  | `{}`       |
| refractory | float               | refractory period in ms.                                                                          | `None`     |