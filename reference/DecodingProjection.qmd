# DecodingProjection { #ANNarchy.inputs.DecodingProjection.DecodingProjection }

```python
DecodingProjection(
    pre,
    post,
    target,
    window=0.0,
    name=None,
    copied=False,
    net_id=0,
)
```

Decoding projection to transform spike trains into firing rates.

The pre-synaptic population must be a spiking population, while the post-synaptic one must be rate-coded.

Pre-synaptic spikes are accumulated for each post-synaptic neuron. A sliding window can be used to smoothen the results with the ``window`` parameter.

The decoded firing rate is accessible in the post-synaptic neurons with `sum(target)`.

The projection can be connected using any method available in `Projection` (although all-to-all or many-to-one makes mostly sense). Delays are ignored.

The weight value allows to scale the firing rate: if you want a pre-synaptic firing rate of 100 Hz to correspond to a post-synaptic rate of 1.0, use ``w = 1./100.``.

Example:

```python
net = ann.Network()

pop1 = net.create(ann.PoissonPopulation(1000, rates=100.))
pop2 = net.create(1, ann.Neuron(equations="r=sum(exc)"))

proj = net.connect(ann.DecodingProjection(pop1, pop2, 'exc', window=10.0))
proj.all_to_all(1.0)
```

## Parameters {.doc-section .doc-section-parameters}

| Name   | Type       | Description                                                  | Default    |
|--------|------------|--------------------------------------------------------------|------------|
| pre    | Population | pre-synaptic population.                                     | _required_ |
| post   | Population | post-synaptic population.                                    | _required_ |
| target | str        | type of the connection.                                      | _required_ |
| window | float      | duration of the time window to collect spikes (default: dt). | `0.0`      |
| name   | str        | optional name.                                               | `None`     |