# Pooling { #ANNarchy.extensions.convolution.Pooling.Pooling }

```python
Pooling(
    self,
    pre,
    post,
    target,
    psp='pre.r',
    operation='max',
    name=None,
    copied=False,
    net_id=0,
)
```

Performs a pooling operation (e.g. max.pooling) on the pre-synaptic population.

Each post-synaptic neuron covers a specific region (``extent``) of the pre-synaptic
population, over which the result of the operation on firing rates will be
assigned to sum(target).

The extent is automatically computed using the geometry of the populations, but can be specified in the `pooling()`` methods.

Example:

```python
import ANNarchy as ann
from ANNarchy.extensions.convolution import Pooling

net = ann.Network()
inp = net.create(geometry=(100, 100), neuron=ann.Neuron(parameters="r = 0.0"))
pop = net.create(geometry=(50, 50), neuron=ann.Neuron(equations="r = sum(exc)"))

proj = net.connect(Pooling(inp, pop, 'exc', operation='max')) # max-pooling
proj.pooling() # extent=(2, 2) is implicit
```

## Parameters {.doc-section .doc-section-parameters}

| Name      | Type   | Description                                                            | Default    |
|-----------|--------|------------------------------------------------------------------------|------------|
| pre       |        | pre-synaptic population (either its name or a ``Population`` object).  | _required_ |
| post      |        | post-synaptic population (either its name or a ``Population`` object). | _required_ |
| target    |        | type of the connection                                                 | _required_ |
| operation |        | pooling function to be applied ("max", "min", "mean")                  | `'max'`    |

## Methods

| Name | Description |
| --- | --- |
| [pooling](#ANNarchy.extensions.convolution.Pooling.Pooling.pooling) | Connects the `Pooling` projection. |
| [save_connectivity](#ANNarchy.extensions.convolution.Pooling.Pooling.save_connectivity) | Not available. |
| [save](#ANNarchy.extensions.convolution.Pooling.Pooling.save) | Not available. |
| [load](#ANNarchy.extensions.convolution.Pooling.Pooling.load) | Not available. |
| [receptive_fields](#ANNarchy.extensions.convolution.Pooling.Pooling.receptive_fields) | Not available. |
| [connectivity_matrix](#ANNarchy.extensions.convolution.Pooling.Pooling.connectivity_matrix) | Not available. |

### pooling { #ANNarchy.extensions.convolution.Pooling.Pooling.pooling }

```python
pooling(extent=None, delays=0.0)
```

Connects the `Pooling` projection.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type   | Description                                                                                                                                                                                                                                                                        | Default   |
|--------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
| extent | tuple  | extent of the pooling area expressed in the geometry of the pre-synaptic population (e.g ``(2, 2)``). In each dimension, the product of this extent with the number of neurons in the post-synaptic population must be equal to the number of pre-synaptic neurons. Default: None. | `None`    |
| delays | float  | synaptic delay in ms                                                                                                                                                                                                                                                               | `0.0`     |

### save_connectivity { #ANNarchy.extensions.convolution.Pooling.Pooling.save_connectivity }

```python
save_connectivity(filename)
```

Not available.

### save { #ANNarchy.extensions.convolution.Pooling.Pooling.save }

```python
save(filename)
```

Not available.

### load { #ANNarchy.extensions.convolution.Pooling.Pooling.load }

```python
load(filename)
```

Not available.

### receptive_fields { #ANNarchy.extensions.convolution.Pooling.Pooling.receptive_fields }

```python
receptive_fields(variable='w', in_post_geometry=True)
```

Not available.

### connectivity_matrix { #ANNarchy.extensions.convolution.Pooling.Pooling.connectivity_matrix }

```python
connectivity_matrix(fill=0.0)
```

Not available.