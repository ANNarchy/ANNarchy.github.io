# Copy { #ANNarchy.extensions.convolution.Copy.Copy }

```python
Copy(
    self,
    pre,
    post,
    target,
    psp='pre.r * w',
    operation='sum',
    name=None,
    copied=False,
    net_id=0,
)
```

Creates a virtual projection reusing the weights and delays of an already-defined projection.

Although the original projection can be learnable, this one can not. Changes in the original weights will be reflected in this projection. The only possible modifications are ``psp`` and ``operation``.

The pre- and post-synaptic populations of both projections must have the same geometry.

Example:

```python
import ANNarchy as ann
from ANNarchy.extensions.convolution import Copy

net = ann.Network()

pop1 = net.create(1000, ann.Izhikevich)
pop2 = net.create(1000, ann.Izhikevich)
pop3 = net.create(1000, ann.Izhikevich)

proj = ann.Projection(pop1, pop2, "exc")
proj.connect_fixed_probability(0.1, 0.5)

copy_proj = Copy(pop1, pop3, "exc")
copy_proj.connect_copy(proj)
```

## Parameters {.doc-section .doc-section-parameters}

| Name      | Type   | Description                                                                                                 | Default       |
|-----------|--------|-------------------------------------------------------------------------------------------------------------|---------------|
| pre       |        | pre-synaptic population (either its name or a ``Population`` object).                                       | _required_    |
| post      |        | post-synaptic population (either its name or a ``Population`` object).                                      | _required_    |
| target    |        | type of the connection                                                                                      | _required_    |
| psp       |        | continuous influence of a single synapse on the post-synaptic neuron (default for rate-coded: ``w*pre.r``). | `'pre.r * w'` |
| operation |        | operation (sum, max, min, mean) performed by the kernel (default: sum).                                     | `'sum'`       |

## Methods

| Name | Description |
| --- | --- |
| [connect_copy](#ANNarchy.extensions.convolution.Copy.Copy.connect_copy) | Instantiates the projection. |
| [save_connectivity](#ANNarchy.extensions.convolution.Copy.Copy.save_connectivity) | Not available. |
| [save](#ANNarchy.extensions.convolution.Copy.Copy.save) | Not available. |
| [load](#ANNarchy.extensions.convolution.Copy.Copy.load) | Not available. |
| [receptive_fields](#ANNarchy.extensions.convolution.Copy.Copy.receptive_fields) | Not available. |
| [connectivity_matrix](#ANNarchy.extensions.convolution.Copy.Copy.connectivity_matrix) | Not available. |

### connect_copy { #ANNarchy.extensions.convolution.Copy.Copy.connect_copy }

```python
connect_copy(projection)
```

Instantiates the projection.

#### Parameters {.doc-section .doc-section-parameters}

| Name       | Type   | Description                  | Default    |
|------------|--------|------------------------------|------------|
| projection |        | Existing projection to copy. | _required_ |

### save_connectivity { #ANNarchy.extensions.convolution.Copy.Copy.save_connectivity }

```python
save_connectivity(filename)
```

Not available.

### save { #ANNarchy.extensions.convolution.Copy.Copy.save }

```python
save(filename)
```

Not available.

### load { #ANNarchy.extensions.convolution.Copy.Copy.load }

```python
load(filename)
```

Not available.

### receptive_fields { #ANNarchy.extensions.convolution.Copy.Copy.receptive_fields }

```python
receptive_fields(variable='w', in_post_geometry=True)
```

Not available.

### connectivity_matrix { #ANNarchy.extensions.convolution.Copy.Copy.connectivity_matrix }

```python
connectivity_matrix(fill=0.0)
```

Not available.