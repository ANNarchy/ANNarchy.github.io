# Copy { #ANNarchy.extensions.convolution.Copy.Copy }

`extensions.convolution.Copy.Copy(self, pre, post, target, psp='pre.r * w', operation='sum', name=None, copied=False)`

Creates a virtual projection reusing the weights and delays of an already-defined projection.

Although the original projection can be learnable, this one can not. Changes in the original weights will be reflected in this projection. The only possible modifications are ``psp`` and ``operation``.

The pre- and post-synaptic populations of both projections must have the same geometry.

Example:

```python
proj = ann.Projection(pop1, pop2, "exc")
proj.connect_fixed_probability(0.1, 0.5)

copy_proj = Copy(pop1, pop3, "exc")
copy_proj.connect_copy(proj)
```

## Parameters

| Name        | Type   | Description                                                                                                 | Default       |
|-------------|--------|-------------------------------------------------------------------------------------------------------------|---------------|
| `pre`       |        | pre-synaptic population (either its name or a ``Population`` object).                                       | _required_    |
| `post`      |        | post-synaptic population (either its name or a ``Population`` object).                                      | _required_    |
| `target`    |        | type of the connection                                                                                      | _required_    |
| `psp`       |        | continuous influence of a single synapse on the post-synaptic neuron (default for rate-coded: ``w*pre.r``). | `'pre.r * w'` |
| `operation` |        | operation (sum, max, min, mean) performed by the kernel (default: sum).                                     | `'sum'`       |

## Methods

| Name | Description |
| --- | --- |
| [connect_copy](#ANNarchy.extensions.convolution.Copy.Copy.connect_copy) |  |
| [connectivity_matrix](#ANNarchy.extensions.convolution.Copy.Copy.connectivity_matrix) | Not available. |
| [generate_omp](#ANNarchy.extensions.convolution.Copy.Copy.generate_omp) | Code generation of CopyProjection object for the openMP paradigm. |
| [load](#ANNarchy.extensions.convolution.Copy.Copy.load) | Not available. |
| [receptive_fields](#ANNarchy.extensions.convolution.Copy.Copy.receptive_fields) | Not available. |
| [save](#ANNarchy.extensions.convolution.Copy.Copy.save) | Not available. |
| [save_connectivity](#ANNarchy.extensions.convolution.Copy.Copy.save_connectivity) | Not available. |

### connect_copy { #ANNarchy.extensions.convolution.Copy.Copy.connect_copy }

`extensions.convolution.Copy.Copy.connect_copy(projection)`



#### Parameters

| Name         | Type   | Description                  | Default    |
|--------------|--------|------------------------------|------------|
| `projection` |        | Existing projection to copy. | _required_ |

### connectivity_matrix { #ANNarchy.extensions.convolution.Copy.Copy.connectivity_matrix }

`extensions.convolution.Copy.Copy.connectivity_matrix(fill=0.0)`

Not available.

### generate_omp { #ANNarchy.extensions.convolution.Copy.Copy.generate_omp }

`extensions.convolution.Copy.Copy.generate_omp()`

Code generation of CopyProjection object for the openMP paradigm.

### load { #ANNarchy.extensions.convolution.Copy.Copy.load }

`extensions.convolution.Copy.Copy.load(filename)`

Not available.

### receptive_fields { #ANNarchy.extensions.convolution.Copy.Copy.receptive_fields }

`extensions.convolution.Copy.Copy.receptive_fields(variable='w', in_post_geometry=True)`

Not available.

### save { #ANNarchy.extensions.convolution.Copy.Copy.save }

`extensions.convolution.Copy.Copy.save(filename)`

Not available.

### save_connectivity { #ANNarchy.extensions.convolution.Copy.Copy.save_connectivity }

`extensions.convolution.Copy.Copy.save_connectivity(filename)`

Not available.