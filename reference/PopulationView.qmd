# PopulationView { #ANNarchy.core.PopulationView.PopulationView }

```python
PopulationView(self, population, ranks, geometry=None)
```

Subset of a Population.

A list of ranks can be passed, but population views are usually created through slicing:

```python
pop = net.create(1000, neuron)

E = pop[:800] # ann.PopulationView(pop, range(800))
I = pop[800:] # ann.PopulationView(pop, range(800, 1000))
```

## Parameters {.doc-section .doc-section-parameters}

| Name       | Type   | Description                                                       | Default    |
|------------|--------|-------------------------------------------------------------------|------------|
| population |        | population object                                                 | _required_ |
| ranks      |        | list or numpy array containing the ranks of the selected neurons. | _required_ |
| geometry   |        | a geometry for the Populationview (optional)                      | `None`     |

## Attributes

| Name | Description |
| --- | --- |
| [population](#ANNarchy.core.PopulationView.PopulationView.population) | Original population. |
| [ranks](#ANNarchy.core.PopulationView.PopulationView.ranks) | Array of ranks in the PopulationView. |
| [geometry](#ANNarchy.core.PopulationView.PopulationView.geometry) | Geometry of the PopulationView (optional). |
| [size](#ANNarchy.core.PopulationView.PopulationView.size) | Size of the PopulationView (number of neurons). |
| [targets](#ANNarchy.core.PopulationView.PopulationView.targets) | List of targets connected to the population. |
| [name](#ANNarchy.core.PopulationView.PopulationView.name) | Name of the original population. |
| [attributes](#ANNarchy.core.PopulationView.PopulationView.attributes) | Ã„ist of attributes of the original population. |
| [variables](#ANNarchy.core.PopulationView.PopulationView.variables) | List of variables of the original population. |
| [parameters](#ANNarchy.core.PopulationView.PopulationView.parameters) | List of constants of the original population. |

## Methods

| Name | Description |
| --- | --- |
| [rank_from_coordinates](#ANNarchy.core.PopulationView.PopulationView.rank_from_coordinates) | Returns the rank of a neuron based on coordinates. |
| [coordinates_from_rank](#ANNarchy.core.PopulationView.PopulationView.coordinates_from_rank) | Returns the coordinates of a neuron based on its rank. |
| [get](#ANNarchy.core.PopulationView.PopulationView.get) | Returns the parameter/variable value. |
| [set](#ANNarchy.core.PopulationView.PopulationView.set) | Updates the neurons' parameter/variable values. |
| [sum](#ANNarchy.core.PopulationView.PopulationView.sum) | Returns the array of weighted sums corresponding to the target: |

### rank_from_coordinates { #ANNarchy.core.PopulationView.PopulationView.rank_from_coordinates }

```python
rank_from_coordinates(coord, local=False)
```

Returns the rank of a neuron based on coordinates.

When local is `False` (default), the coordinates are relative to the ORIGINAL population, not the PopulationView.

When local is `True`, the coordinates are interpreted relative to the geometry of the PopulationView if available. When you add two population views, the geometry is lost and the method will return an error.

The rank is relative to the original population. Iterate over len(pop) otherwise.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type   | Description                                                     | Default    |
|--------|--------|-----------------------------------------------------------------|------------|
| coord  | tuple  | coordinate tuple, can be multidimensional.                      | _required_ |
| local  | bool   | whether the coordinates are local to the PopulationView or not. | `False`    |

### coordinates_from_rank { #ANNarchy.core.PopulationView.PopulationView.coordinates_from_rank }

```python
coordinates_from_rank(rank, local=False)
```

Returns the coordinates of a neuron based on its rank.

When local is `False` (default), the coordinates are relative to the ORIGINAL population, not the PopulationView.

When local is `True`, the coordinates are interpreted relative to the geometry of the PopulationView if available. When you add two population views, the geometry is lost and the method will return an error.

The rank is relative to the original population. Iterate over len(pop) otherwise.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type   | Description                                                     | Default    |
|--------|--------|-----------------------------------------------------------------|------------|
| rank   | int    | rank of the neuron in the original population.                  | _required_ |
| local  | bool   | whether the coordinates are local to the PopulationView or not. | `False`    |

### get { #ANNarchy.core.PopulationView.PopulationView.get }

```python
get(name)
```

Returns the parameter/variable value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type   | Description                     | Default    |
|--------|--------|---------------------------------|------------|
| name   |        | name of the parameter/variable. | _required_ |

### set { #ANNarchy.core.PopulationView.PopulationView.set }

```python
set(value)
```

Updates the neurons' parameter/variable values.

**Warning:** If you modify the value of a global parameter, this will be the case for ALL neurons of the population, not only the subset.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type   | Description                                                                                                                                                                     | Default    |
|--------|--------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| value  | dict   | dictionary of parameters/variables to be updated for the corresponding subset of neurons. It can be a single value or a list/1D array of the same size as the `PopulationView`. | _required_ |

### sum { #ANNarchy.core.PopulationView.PopulationView.sum }

```python
sum(target)
```

Returns the array of weighted sums corresponding to the target:

```python
excitatory = pop[:50].sum('exc')
```

For spiking networks, this is equivalent to accessing the conductances directly::

```python
excitatory = pop[:50].g_exc
```

If no incoming projection has the given target, the method returns zeros.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type   | Description   | Default    |
|--------|--------|---------------|------------|
| target | str    | the target.   | _required_ |